.TH LIBCALCULATORFINANCE 1 libcalculatorfinance\-VERSION
.SH NAME
libcalculatorfinance \- a shared library, written in C for doing financial calculations
.SH SYNOPSIS
.B libcalculatorfinance
.SH DEPENDS ON
A c-compiler that supports the C99 standard.
.SH DESCRIPTION
libcalculatorfinance is a c library, that contains functions for making financial calculations.
It can be used for calculations regarding money management in trading, investing or keeping financial records.
.SH FUNCTIONS
.TP
.B char *version()
Returns a string with the library version.
.B double calculate_average_price(int a_nargs, ...);
calculate_average_price:
Calculate the average price, based on previous transactions.
It requires a SharesPrice struct list, preceded by the total number
of records.
Note:
-----
S1 = 415, P1 = 23.65, S2 = 138, P2 = 16.50
When you need to buy new stocks and you need to log this for
accounting purposes, you need to know what the average price was
that you paid. You only know the total number of shares you have,
called S3. The price is the average of all prices you paid on buy/
sell of all previous transactions.
S1 * P1 + S2 * P2 = S3 * P3
=> P3 = (S1 * P1 + S2 * P2) / (S1 + S2)
=> P3 = (415 * 23.65 + 138 * 16.50) / 553
=> P3 = 21.8657
.B double calculate_percentage_of(double a_value, double a_from_value);
Calculate what percentage a_value is from a_from_value.
.B double convert_from_orig(double a_price, double a_exchange_rate);
Returns a price, with an exchange rate applied to it.
Used to convert a given currency to a new currency.
.B double convert_to_orig(double a_converted_price, double a_exchange_rate);
.B int calculate_shares_recommended(double a_pool, double a_commission, double a_tax, double a_price);
.B int calculate_leveraged_contracts(int a_n);
.B double calculate_stoploss(double a_price, int a_shares, double a_tax, double a_commission, double a_risk, double a_pool, int a_is_long);
.B double calculate_risk_input(double a_pool, double a_risk);
.B double calculate_risk_initial(double a_price, int a_shares, double a_tax, double a_commission, double a_stoploss, int a_is_long);
.B double calculate_amount(double a_price, int a_shares);
.B double calculate_amount_with_tax_and_commission(double a_price, int a_shares, double a_tax, double a_commission, transaction_type_t a_transaction_type);
.B double calculate_amount_with_tax(double a_price, int a_shares, double a_tax, transaction_type_t a_transaction_type);
.B double cost_transaction(double a_price, int a_shares, double a_tax, double a_commission);
.B double cost_tax(double a_amount, double a_commission, int a_shares, double a_price, transaction_type_t a_transaction_type);
.B double calculate_price(double a_amount, int a_shares, double a_tax, double a_commission, transaction_type_t a_transaction_type);
.B double calculate_risk_actual(double a_price_buy, int a_shares_buy, double a_tax_buy,
    double a_commission_buy, double a_price_sell, int a_shares_sell, double a_tax_sell,
    double a_commission_sell, double a_risk_initial, double a_profit_loss);
.B double calculate_r_multiple(double a_profit_loss, double a_risk_initial);
.B double calculate_cost_total(double a_amount_buy, double a_tax_buy, double a_commission_buy,
    double a_amount_sell, double a_tax_sell, double a_commission_sell);
.B double calculate_profit_loss(double a_price_buy, int a_shares_buy, double a_price_sell, int a_shares_sell);
.B double calculate_profit_loss_total(double a_price_buy, int a_shares_buy, double a_tax_buy, double a_commission_buy,
    double a_price_sell, int a_shares_sell, double a_tax_sell, double a_commission_sell);
.B double calculate_cost_other(double a_profit_loss, double a_profit_loss_total, double a_cost_total);
.SH USAGE
.SH SEE ALSO
.SH BUGS
None that I know of. All unit-tests succeeded, upon creation of the library.
.SH EXAMPLES
TBD
