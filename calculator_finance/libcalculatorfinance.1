'\" t
.\"     Title: libcalculatorfinance
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 01/27/2016
.\"    Manual: \ \&
.\"    Source: \ \&
.\"  Language: English
.\"
.TH "LIBCALCULATORFINANCE" "1" "01/27/2016" "\ \&" "\ \&"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
libcalculatorfinance \- a shared library, written in C for doing financial calculations
.SH "SYNOPSIS"
.sp
Installed version: libcalculatorfinance\-VERSION
.sp
Installed as: \fBlibcalculatorfinance\&.so\fR
.SH "DEPENDS ON"
.sp
A c\-compiler that supports the C99 standard or higher\&.
.SH "DESCRIPTION"
.sp
libcalculatorfinance is a c library, that contains functions for making financial calculations\&. It can be used for calculations regarding money management in trading, investing or keeping financial records\&.
.SH "FUNCTIONS"
.sp
\fBchar *version();\fR Returns a string with the library version\&.
.sp
\fBdouble calculate_average_price(int a_nargs, \&...);\fR calculate_average_price: Calculate the average price, based on previous transactions\&. It requires a SharesPrice struct list, preceded by the total number of records\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Note:
S1 = 415, P1 = 23\&.65, S2 = 138, P2 = 16\&.50
When you need to buy new stocks and you need to log this for
accounting purposes, you need to know what the average price was
that you paid\&. You only know the total number of shares you have,
called S3\&. The price is the average of all prices you paid on buy/
sell of all previous transactions\&.
S1 * P1 + S2 * P2 = S3 * P3
=> P3 = (S1 * P1 + S2 * P2) / (S1 + S2)
=> P3 = (415 * 23\&.65 + 138 * 16\&.50) / 553
=> P3 = 21\&.8657
.fi
.if n \{\
.RE
.\}
.sp
\fBdouble calculate_percentage_of(double a_value, double a_from_value);\fR Calculate what percentage a_value is from a_from_value\&.
.sp
\fBdouble convert_from_orig(double a_price, double a_exchange_rate);\fR Returns a price, with an exchange rate applied to it\&. Used to convert a given currency to a new currency\&.
.sp
\fBdouble convert_to_orig(double a_converted_price, double a_exchange_rate);\fR Returns a price in the original currency, with the exchange rate no longer applied to it\&.
.sp
\fBint calculate_shares_recommended(double a_pool, double a_commission, double a_tax, double a_price);\fR Calculates the recommended amount of shares you can buy\&.
.sp
\fBint calculate_leveraged_contracts(int a_n);\fR Calculates the number of contracts to buy, according to an algorithm that determines an ideal amount of leverage\&.
.sp
\fBdouble calculate_stoploss(double a_price, int a_shares, double a_tax, double a_commission, double a_risk, double a_pool, int a_is_long);\fR Calculates the stoploss\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Long:
amount selling at stoploss \- amount at buying = initial risk of pool
(S\&.Pb + S\&.Pb\&.T + C) \- (S\&.Ps \- S\&.Ps\&.T \- C) = R/100 * pool
Short:
amount selling \- amount buying at stoploss = initial risk of pool
(S\&.Psl + S\&.Psl\&.T + C) \- (S\&.Ps \- S\&.Ps\&.T \- C) = R/100 * pool
.fi
.if n \{\
.RE
.\}
.sp
\fBdouble calculate_risk_input(double a_pool, double a_risk);\fR Calculates the risk based on total pool and input\&. Consider this the theoretical risk we want to take\&.
.sp
\fBdouble calculate_risk_initial(double a_price, int a_shares, double a_tax, double a_commission, double a_stoploss, int a_is_long);\fR Calculates the initial risk\&. This is the risk we will take if our stoploss is reached\&. This should be equal to the risk_input if everything was correctly calculated\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Long:
S\&.Pb + S\&.Pb\&.T + C \- (S\&.Psl \- S\&.Psl\&.T \- C)
Short:
S\&.Ps + S\&.Psl\&.T + C \- (S\&.Ps \- S\&.Ps\&.T \- C)
.fi
.if n \{\
.RE
.\}
.sp
\fBdouble calculate_amount(double a_price, int a_shares);\fR Calculates the amount without tax and commission\&.
.sp
\fBdouble calculate_amount_with_tax_and_commission(double a_price, int a_shares, double a_tax, double a_commission, transaction_type_t a_transaction_type);\fR Calculates the amount, including tax and commission\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Note:
AMT = SP + SPT + C (buy)
AMT = SP \- SPT \- C (sell)
.fi
.if n \{\
.RE
.\}
.sp
\fBdouble calculate_amount_with_tax(double a_price, int a_shares, double a_tax, transaction_type_t a_transaction_type);\fR Calculates the amount (buy/sell) with tax included, but not the commission\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Note:
profit_loss = S\&.P + S\&.P\&.T (buy)
profit_loss = S\&.P \- S\&.P\&.T (sell)
.fi
.if n \{\
.RE
.\}
.sp
\fBdouble cost_transaction(double a_price, int a_shares, double a_tax, double a_commission);\fR Cost of transaction (tax and commission)\&.
.sp
\fBdouble cost_tax(double a_amount, double a_commission, int a_shares, double a_price, transaction_type_t a_transaction_type);\fR Cost of tax (buy and sell)\&.
.sp
\fBdouble calculate_price(double a_amount, int a_shares, double a_tax, double a_commission, transaction_type_t a_transaction_type);\fR Calculates the price when buying or selling\&.
.sp
\fBdouble calculate_risk_actual(double a_price_buy, int a_shares_buy, double a_tax_buy, double a_commission_buy, double a_price_sell, int a_shares_sell, double a_tax_sell, double a_commission_sell, double a_risk_initial, double a_profit_loss);\fR Calculates the risk we actually took, based on the data in TABLE_TRADE\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Note:
risk_actual = S\&.Pb + S\&.Pb\&.T + Cb \- (S\&.Ps \- S\&.Ps\&.T \- Cs)
It\*(Aqs the same for long and short\&.
.fi
.if n \{\
.RE
.\}
.sp
\fBdouble calculate_r_multiple(double a_profit_loss, double a_risk_initial);\fR Function to calculate R\-multiple\&.
.sp
\fBdouble calculate_cost_total(double a_amount_buy, double a_tax_buy, double a_commission_buy, double a_amount_sell, double a_tax_sell, double a_commission_sell);\fR Function to calculate the total cost associated with the given trade\&.
.sp
\fBdouble calculate_profit_loss(double a_price_buy, int a_shares_buy, double a_price_sell, int a_shares_sell);\fR Calculates the profit_loss, without taking tax and commission into account\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Note:
profit_loss = S\&.Ps \- S\&.Pb
It\*(Aqs the same for long and short\&.
.fi
.if n \{\
.RE
.\}
.sp
\fBdouble calculate_profit_loss_total(double a_price_buy, int a_shares_buy, double a_tax_buy, double a_commission_buy, double a_price_sell, int a_shares_sell, double a_tax_sell, double a_commission_sell);\fR Calculates the total profit_loss\&.
.sp
.if n \{\
.RS 4
.\}
.nf
Note:
profit_loss = S\&.Ps \- S\&.Ps\&.T \- C \- (S\&.Pb + S\&.Pb\&.T + C)
It\*(Aqs the same for long and short\&.
.fi
.if n \{\
.RE
.\}
.sp
\fBdouble calculate_cost_other(double a_profit_loss, double a_profit_loss_total, double a_cost_total);\fR Calculates other costs based on the difference that remains\&.
.SH "USAGE"
.sp
It\(cqs a library, designed to be used from application code\&. See the EXAMPLES section on how to use it in python\&.
.SH "SEE ALSO"
.sp
This library stands on it\(cqs own and is not related to other man pages\&.
.SH "BUGS"
.sp
None that I know of\&. All unit\-tests succeeded, upon creation of the library\&.
.SH "EXAMPLES"
.sp
Python To use this in python, you can load the library as shown in the following examples\&.
.sp
.if n \{\
.RS 4
.\}
.nf
from ctypes import cdll
lcf = cdll\&.LoadLibrary(\*(Aqlibcalculatorfinance\&.so\*(Aq)
print(lcf\&.calculate_leveraged_contracts(5))
.fi
.if n \{\
.RE
.\}
.sp
For the function \fIdouble calculate_average_price(int a_nargs, \&...);\fR you need a SharesPrice struct, which is defined in C as:
.sp
.if n \{\
.RS 4
.\}
.nf
typedef struct
{
    int sp_shares;
    double sp_price;
} SharesPrice;
.fi
.if n \{\
.RE
.\}
.sp
To use this struct from python, you would need to declare the following:
.sp
.if n \{\
.RS 4
.\}
.nf
from ctypes import cdll
from ctypes import Structure, c_int, c_double

lcf = cdll\&.LoadLibrary(\*(Aqlibcalculatorfinance\&.so\*(Aq)

class SharesPrice(Structure):
     _fields_ = [
        ("sp_shares", c_int),
        ("sp_price", c_double)]

l_sharesprice1 = SharesPrice(153, 12\&.18)
l_sharesprice2 = SharesPrice(240, 23\&.65)
print(lcf\&.calculate_average_price(2, byref(l_sharesprice1), byref(l_sharesprice2)))
.fi
.if n \{\
.RE
.\}
